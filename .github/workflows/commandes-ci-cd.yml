name: 🛒 MSPR4 Commandes CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - "MSPR4_Commandes/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "MSPR4_Commandes/**"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/commandes-api
  WORKING_DIR: MSPR4_Commandes

jobs:
  quality-tests:
    name: 🔍 Tests Qualité Commandes
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5 # Version récente
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "${{ env.WORKING_DIR }}/requirements.txt"

      - name: 📦 Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov bandit safety flake8

      - name: 🎯 Run tests
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          pytest test_api.py test_db.py -v --cov=. --cov-report=xml --cov-fail-under=80
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          API_TOKEN: test_token_ci

      - name: 🔒 Security analysis
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f txt

      - name: 📊 Code quality
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  docker-build:
    name: 🐳 Docker Build Commandes
    runs-on: ubuntu-latest
    needs: quality-tests
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push Docker image
        uses: docker/build-push-action@v6 # Version récente
        with:
          context: ${{ env.WORKING_DIR }}
          file: ${{ env.WORKING_DIR }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-tests, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 🎯 Production deployment
        run: |
          echo "🚀 Deploying Commandes microservice to production"
          echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "✅ MSPR4 Commandes deployed successfully!"
