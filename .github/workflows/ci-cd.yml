name: MSPR4 Commandes - CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - "MSPR4_Commandes/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "MSPR4_Commandes/**"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/commandes-api
  WORKING_DIR: MSPR4_Commandes

jobs:
  # ====================================
  # JOB 1: TESTS QUALITÉ & SÉCURITÉ
  # ====================================
  quality-tests:
    name: 🔍 Tests Qualité & Sécurité
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "${{ env.WORKING_DIR }}/requirements.txt"

      - name: 📦 Installation des dépendances
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov bandit safety flake8

      - name: 🎯 Tests unitaires avec couverture
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          pytest test_api.py test_db.py -v --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=80
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          API_TOKEN: test_token_ci

      - name: 🔒 Analyse de sécurité avec Bandit
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f txt

      - name: 📊 Analyse qualité du code
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # ====================================
  # JOB 2: BUILD & TESTS DOCKER
  # ====================================
  docker-build:
    name: 🐳 Build & Tests Docker
    runs-on: ubuntu-latest
    needs: quality-tests

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login vers Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extraction métadonnées
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build et push de l'image Docker
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.WORKING_DIR }}
          file: ${{ env.WORKING_DIR }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ====================================
  # JOB 3: TESTS D'INTÉGRATION
  # ====================================
  integration-tests:
    name: 🔗 Tests d'Intégration
    runs-on: ubuntu-latest
    needs: docker-build

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_commandes
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Installation des dépendances
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          pip install -r requirements.txt
          pip install httpx pytest-asyncio

      - name: 🗄️ Setup base de données de test
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          python commandes_transfert.py
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_commandes

      - name: 🚀 Démarrage de l'API en arrière-plan
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          uvicorn main:app --host 0.0.0.0 --port 8001 &
          sleep 10
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_commandes
          API_TOKEN: test_integration_token

      - name: 🧪 Exécution des tests d'intégration
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          python test_api.py
          chmod +x test_api_curl.sh
          ./test_api_curl.sh
        env:
          API_BASE_URL: http://localhost:8001
          API_TOKEN: test_integration_token

  # ====================================
  # JOB 4: DÉPLOIEMENT (Production)
  # ====================================
  deploy-production:
    name: 🚀 Déploiement Production
    runs-on: ubuntu-latest
    needs: [quality-tests, docker-build, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: 🚀 Déploiement vers Production
        run: |
          echo "🎯 Déploiement de l'image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "📋 Version déployée: ${{ github.sha }}"
          echo "✅ Pipeline CI/CD MSPR4 exécuté avec succès!"

      - name: 📊 Notification de déploiement
        if: success()
        run: |
          echo "✅ Déploiement réussi du microservice Commandes MSPR4!"
          echo "🔗 URL API: Production Ready"
          echo "📖 Documentation: Disponible via /docs"
